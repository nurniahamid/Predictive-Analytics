# -*- coding: utf-8 -*-
"""Predictive Analytic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15iRgZlDgQM1zZD1f2wl-SDi6Kfxj-7iQ

# **Import Libarary**

Memeprsiapkan library yanga akan digunakan pada proyek kali ini yaitu
- numpy, pandas untuk manipulasi data dan array
- matplotlib, seaborn untuk visualisasi data
- sklearn, untuk preprocessing, splitting dan evaluasi model
- tensorflow keras untuk membangun model deep learning (LSTM)
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns
import tensorflow as tf

from statsmodels.tsa.arima.model import ARIMA
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Input, LSTM, Dense
from keras.callbacks import EarlyStopping
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import mean_absolute_percentage_error



"""# **Data Loading**

"""

from google.colab import drive
drive.mount('/content/drive')

"""Data yang digunakan adalah data harga emas dari tahun 2020 - April 2025 yang di ambil dari wen investing.com

Link Data : https://www.investing.com/currencies/xau-usd-historical-data

kemudian data disimpan ke google drive
"""

data_emas = pd.read_csv('/content/drive/MyDrive/Predictive Analytics/XAU_USD Historical Data.csv')
data_emas

"""- Data berisi 1368 baris dalam data set
- Data mempunyai 7 kolom, yaitu : Date, Price,	Open,	High,	Low	Vol,	dan Change %

# **Exploratory Data Analytics**

Melakukan EDA untuk menganalisis karakteristik data dan untuk menemukan pola, data duplicated, anomali dan memeriksa asumsi pada data menggunakan bantuan statistik dan representasi visualisasi.
"""

data_emas.info()

"""Deskripsi Variabel data :

- Date = tanggal perdangangan
- Price = Harga penutupan emas pada tanggal tersebut
- Open = Harga pada saat pasar dibuka pada hari itu
- High = Harga tertinggi emas yang dicapai hari itu
- Low = Harga terendah emas dalam hari itu
- Vol = Volume Transaksi
- Cahnge = presentase perubahan harga dari hari sebelumnya

mengubah bentuk data 'Date' menjadi format date karena sebelumnya masih format teks
"""

data_emas['Date'] = pd.to_datetime(data_emas['Date'])

"""membersihkan kolom numerik yang masih beruba teks karena mengandung tanda koma (,) lalu mengubahnay menjadi tipe data numeril (float) agar bisa digunakan dalam analisis dan modelling"""

cols_to_clean =['Price', 'Open', 'High', 'Low']
for col in cols_to_clean:
  data_emas[col] = data_emas[col].str.replace(',', '').astype(float)

"""menghapus kolom vol dan change karenati tidak akan kita gunakan analisis selanjutnya."""

data_emas.drop(columns=['Vol.','Change %'], inplace=True)

data_emas.info()

data_emas.head()

data_emas.duplicated().sum()

"""berdasarkan hasil pemeriksaan tidak terdapat data duplikat"""

data_emas.isnull().sum()

"""tidak terdapat juga data null"""

data_emas.describe()

"""- Date : Rentang wakti data dari 2020-01-01 sampai 2025-04-30, artinya data lebih dari 5 tahun, dari januari 2020 hingga april 2025
- Price :
Nilai Rata-Rata : 2001.50
Nilai Minimum: 1471
Nilai Maksimum: 3424.30
volatilitas harga emas cukup signifikan dalam 5 tahun terakhir
- Open :
Nilai Rata-Rata : 2000.70
Nilai Minimum: 1470.39
Nilai Maksimum: 3421.57
- High :
Nilai Rata-Rata : 2015.53
Nilai Minimum: 1501.61
Nilai Maksimum: 3500.33
berdsarkan harga tertinggi menunjukan fluktuasi harian yang mencolok, harga tertinggi adalah 3500.33 yang mana lebih tinggi daripada harga ppemukaan
- Low :
Nilai Rata-Rata : 1986.75
Nilai Minimum: 1451.68
Nilai Maksimum: 3366.74
Harga terendah mencatatkan angka yang lebih rendah dari rata-rata, yang berarti harga emas sempat mengalami penurunan yang cukup besar di beberapa waktu

- Standar Deviasi :
Standar deviasi sekitar 356.36 untuk harga penutupan menunjukkan tingkat volatilitas yang cukup tinggi pada harga emas, di mana pergerakan harga harian bisa berfluktuasi sekitar 356.36 poin dari harga rata-rata.

Visualisasi menggunakan scatter plot untuk mengetahui pola tren data emas dan heatmap untuk mengetahui korelasi antar fitur
"""

plt.figure(figsize=(10,6))
sns.scatterplot(x=data_emas['Date'], y=data_emas['Price'])

plt.title('Scatter Plot Harga dan Emas')
plt.xlabel('Date')
plt.ylabel('price')

plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
plt.gca().xaxis.set_major_locator(mdates.YearLocator(1))
plt.xticks(rotation=45)
plt.show()

"""dari data dilihat bahwa tren harga emas dalam plot ini menunjukkan pertumbuhan jangka panjang dengan fase fluktuatif di tengah dan kenaikann  tajam menjelang akhir periode"""

plt.figure(figsize=(8,6))
sns.heatmap(data_emas[['Price', 'Open', 'High', 'Low']].corr(), annot=True, cmap='coolwarm')
plt.title('Heatmap Korelasi Fitur')
plt.show()

"""berdasarkan hasilnya Fitur-Fitur nya sangat kuat berkorelasi satu sama lain."""

sns.histplot(data_emas['Price'], bins=30, kde=True)
plt.title('Distribusi Harga Emas')
plt.show()

"""- Distribusi terlihat positevely skewed atau condong ke kiri
- ada beberapa teradi kenaikan harga  cukup tinggi (berkisar 2500-3400) tapi tidak terlalu sering(jarang)
- kemungkinan mencerminkan tren pasar

# **Splitting Data**
"""

data_emas = data_emas.sort_values('Date')
data_emas = data_emas.reset_index(drop=True)

train_size = int(len(data_emas)* 0.8)

train_data = data_emas[:train_size]
test_data = data_emas[train_size:]

print("Train data shape:", train_data.shape)
print("Test data shape:", test_data.shape)

plt.figure(figsize=(12,6))

plt.plot(train_data['Date'], train_data['Price'], label='Training Data', color='blue')
plt.plot(test_data['Date'], test_data['Price'], label='Testing Data', color='orange')

plt.title('Harga Emas - Data Training vs Testing')
plt.xlabel('Tanggal')
plt.ylabel('Harga Emas')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

"""# **Model Development**

### **Model ARIMA**
"""

train_series = train_data.set_index('Date')['Price']
test_series = test_data.set_index('Date')['Price']

train_series.index = pd.DatetimeIndex(train_series.index)
train_series.index.freq = pd.infer_freq(train_series.index)

test_series.index = pd.DatetimeIndex(test_series.index)
test_series.index.freq = pd.infer_freq(test_series.index)

plt.figure(figsize=(12, 6))
plt.subplot(1,2,1)
plot_acf(train_series, lags=40, ax=plt.gca())
plt.title('Autocorrelation (ACF)')
plt.subplot(1,2,2)
plot_pacf(train_series, lags=40, ax=plt.gca(), method='ywm')
plt.title('Partial Autocorrelation (PACF)')
plt.tight_layout()
plt.show()

"""- grafik acf menunjukkan bahwa semua lag sinifikan hingga levih dari lag ke-30, artinya data memiliki autokorelasi jangka panjang, yang menunjukan komponen tren yang kuat, ini juga memberitahukan bahwa differencing perlu minimal 1 untuk menghilangkan tren
- pada geafik PACH hanya 1 lag yang signifikan, menunjukan hanya perlu p = 1
"""

model = ARIMA(train_series, order=(1,1,1))
model_fit = model.fit()
print(model_fit.summary())

model = ARIMA(train_series, order=(2,1,2))
model_fit = model.fit()
print(model_fit.summary())

model = ARIMA(train_series, order=(2,2,2))
model_fit = model.fit()
print(model_fit.summary())

"""1. ARIMA(1,1,1)
- AR(1) tidak signifikan (p=0.08)
- AIC = 9461.276
- Tidak cukup kuat menangkap dinamika tren harga emas.

2. ARIMA(2,1,2)
- Semua parameter signifikan.
- AIC = 9460.719 (terendah)
- Log Likelihood tertinggi.
- Secara statistik paling efisien, namun secara prediksi justru kurang menangkap tren naik tajam di data uji.

3. ARIMA(2,2,2)

- AR dan MA sebagian besar signifikan.
- AIC sedikit lebih tinggi = 9463.848.
- model ini menghasilkan proyeksi yang lebih stabil dan mengikuti tren naik aktual harga emas selama periode uji, menjadikannya lebih cocok secara prediktif
"""

model = ARIMA(train_series, order=(2,2,2))
model_fit = model.fit()
forecast_values = model_fit.forecast(steps=len(test_series)).values
forecast = pd.Series(forecast_values, index=test_series.index)

print(forecast.head())
print(forecast.isna().sum())

plt.figure(figsize=(12, 6))
plt.plot(train_series.index, train_series, label='Data Training')
plt.plot(test_series.index, test_series, label='Data Aktual (Testing)', color='orange')
plt.plot(forecast.index, forecast, label='Hasil Prediksi ARIMA(2,1,2)', color='green')
plt.xlabel('Tanggal')
plt.ylabel('Harga Emas')
plt.title('Prediksi Harga Emas vs Aktual')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

"""Model ARIMA(2,2,2) kurang tepat untuk memodelkan harga emas dalam periode ini karena:
- Tren harga emas di periode testing meningkat sangat tajam, Sedangkan model ARIMA memproyeksikan kenaikan linier lambat. Sehingga hasil prediksi terlalu underestimate dibanding realita.
"""

rmse = np.sqrt(mean_squared_error(test_series, forecast))
mae = mean_absolute_error(test_series, forecast)
print(f'RMSE: {rmse:.2f}')
print(f'MAE : {mae:.2f}')

"""- MAE sebesar 255.01 berarti bahwa rata-rata kesalahan prediksi harian dari model ARIMA sekitar 255

- RMSE yang lebih besar 333.80 menunjukkan adanya beberapa hari dengan kesalahan yang cukup tinggi, karena RMSE lebih sensitif terhadap outlier atau error yang besar

## **Model LSTM**

### **Data Scalling**
"""

scaler = MinMaxScaler(feature_range=(0,1))
harga_emas = data_emas[['Price']].values
harga_emas_scaled = scaler.fit_transform(harga_emas)

train_size = int(len(harga_emas_scaled) * 0.8)

train_scaled = harga_emas_scaled[:train_size]
test_scaled = harga_emas_scaled[train_size:]

"""### **Window Data**

Buat dataset baru dari data time series:
Input (X): 30 hari sebelumnya
Target (y): harga emas hari ke-31
"""

def create_lstm_dataset(data_scaled, window_size=30):
    X, y = [], []
    for i in range(window_size, len(data_scaled)):
        X.append(data_scaled[i-window_size:i, 0])
        y.append(data_scaled[i, 0])
    return np.array(X), np.array(y)

window_size = 30

X_train, y_train = create_lstm_dataset(train_scaled, window_size)
X_test, y_test = create_lstm_dataset(test_scaled, window_size)

print("X_train shape:", X_train.shape)
print("y_train shape:", y_train.shape)
print("X_test shape:", X_test.shape)
print("y_test shape:", y_test.shape)

print("Total data:", len(harga_emas_scaled))
print("Train size:", len(train_scaled))
print("Test size:", len(test_scaled))

"""Membuat Model"""

model = Sequential([
    Input(shape=(X_train.shape[1], 1)),
    LSTM(units=50, return_sequences=True),
    LSTM(units=50, return_sequences=False),
    Dense(units=1)
])

model.compile(optimizer='adam', loss='mean_squared_error')
early_stop = EarlyStopping(monitor='loss', patience=5, restore_best_weights=True)
model.fit(X_train, y_train, epochs=50, batch_size=32, callbacks=[early_stop])

"""**Evaluasi Model**"""

y_pred = model.predict(X_test)
y_pred_inv = scaler.inverse_transform(y_pred)
y_test_inv = scaler.inverse_transform(y_test.reshape(-1, 1))

mape = mean_absolute_percentage_error(y_test_inv, y_pred_inv)
accuracy = 1 - mape

print("MAPE:", mape)
print("Accuracy :", accuracy)

"""Berdasarkan evaluasi, model LSTM menunjukkan performa prediksi yang sangat baik dengan akurasi mencapai 96.7% dan MAPE hanya 3.30%, menjadikannya lebih unggul dibandingkan ARIMA(2,2,2) dalam konteks ini. Oleh karena itu, LSTM lebih direkomendasikan untuk prediksi harga emas harian dari dataset yang digunakan"""

y_pred_inv = scaler.inverse_transform(y_pred)
y_test_inv = scaler.inverse_transform(y_test.reshape(-1, 1))

plt.figure(figsize=(10, 6))
plt.plot(y_test_inv, label='Actual', color='blue')
plt.plot(y_pred_inv, label='Predicted', color='red', linestyle='--')
plt.title('Actual vs Predicted')
plt.xlabel('Index')
plt.ylabel('Value')
plt.legend()
plt.show()

